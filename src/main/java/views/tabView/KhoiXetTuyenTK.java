/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package views.tabView;

import be.quodlibet.boxable.BaseTable;
import be.quodlibet.boxable.Row;
import entities.ThiSinh;
import java.awt.Font;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import java.util.function.Predicate;
import java.util.logging.*;
import javax.swing.*;
import javax.swing.ListSelectionModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.*;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.font.*;
import org.netbeans.lib.awtextra.*;
import utilities.others.*;
import static utilities.others.Others.moveLastPageToFirst;
import utilities.ui.Ui;

public class KhoiXetTuyenTK extends javax.swing.JPanel {
    List<ThiSinh> thiSinh = null;

    /**
     * Creates new form KhoiXetTuyenTK
     */
    public KhoiXetTuyenTK() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toHopF = new JComboBox<>();
        scrollBar = new JScrollPane();
        table = new JTable();
        SBDLabel = new JLabel();
        exportB = new JButton();
        fillterBtn1 = new JButton();
        sortSBDB = new JButton();
        sortPB = new JButton();
        jLabel3 = new JLabel();
        maxF = new JSpinner();
        minF = new JSpinner();

        setLayout(new AbsoluteLayout());

        toHopF.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        toHopF.setModel(new DefaultComboBoxModel<>(new String[] { "A00", "A01", "B00", "D01", "D07"}));
        toHopF.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent evt) {
                toHopFItemStateChanged(evt);
            }
        });
        add(toHopF, new AbsoluteConstraints(230, 10, 100, 30));

        table.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        table.setModel(new DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SBD", "Họ và tên", "Giới tính", "Ngày sinh", "Tỉnh", "Trường", "Khối tổ hợp", "Mon 1", "Mon 2", "Mon 3", "Tổng điểm"
            }
        ) {
            Class[] types = new Class [] {
                String.class, String.class, Object.class, String.class, String.class, Object.class, String.class, Object.class, Object.class, Object.class, Double.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setColumnSelectionAllowed(true);
        table.getTableHeader().setReorderingAllowed(false);
        scrollBar.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        add(scrollBar, new AbsoluteConstraints(30, 50, 880, 500));

        SBDLabel.setFont(new Font("Cascadia Code", 0, 14)); // NOI18N
        SBDLabel.setText("-");
        add(SBDLabel, new AbsoluteConstraints(180, 560, -1, 30));

        exportB.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        exportB.setText("Export file");
        exportB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                exportBActionPerformed(evt);
            }
        });
        add(exportB, new AbsoluteConstraints(800, 580, 110, 30));

        fillterBtn1.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        fillterBtn1.setText("Lọc");
        fillterBtn1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fillterBtn1ActionPerformed(evt);
            }
        });
        add(fillterBtn1, new AbsoluteConstraints(30, 560, 70, 30));

        sortSBDB.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        sortSBDB.setText("Sắp xếp theo SBD");
        sortSBDB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sortSBDBActionPerformed(evt);
            }
        });
        add(sortSBDB, new AbsoluteConstraints(30, 600, 150, 30));

        sortPB.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        sortPB.setText("Sắp xếp theo tổng điểm");
        sortPB.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                sortPBActionPerformed(evt);
            }
        });
        add(sortPB, new AbsoluteConstraints(200, 600, 190, 30));

        jLabel3.setFont(new Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Xem khối xét tuyển đại học:");
        add(jLabel3, new AbsoluteConstraints(40, 10, 190, 30));

        maxF.setFont(new Font("Cascadia Code", 0, 14)); // NOI18N
        maxF.setModel(new SpinnerNumberModel(30.0d, 0.0d, 30.0d, 0.5d));
        maxF.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                maxFStateChanged(evt);
            }
        });
        add(maxF, new AbsoluteConstraints(200, 560, 60, 30));

        minF.setFont(new Font("Cascadia Code", 0, 14)); // NOI18N
        minF.setModel(new SpinnerNumberModel(0.0d, 0.0d, 30.0d, 0.5d));
        minF.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                minFStateChanged(evt);
            }
        });
        add(minF, new AbsoluteConstraints(110, 560, 60, 30));
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void setVisible(boolean aFlag) {
        super.setVisible(aFlag); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/OverriddenMethodBody

        if (!aFlag) return;

        resetState();
    }

    Predicate<ThiSinh> getFilter() {
        return (ThiSinh ts) -> {
            double tongDiem = Others.getTongDiem(ts, (String) toHopF.getSelectedItem());
            return (double) minF.getValue() <= tongDiem && tongDiem <= (double) maxF.getValue();
        };
    }

    void displayTable(List<ThiSinh> thiSinh) {
        String[] toHop = Others.khoiToHop.get(toHopF.getSelectedItem());
        if (toHop == null) return;

        TableColumnModel model = table.getTableHeader().getColumnModel();
        model.getColumn(7).setHeaderValue(Others.convertMaMonToMon(toHop[1]).toUpperCase());
        model.getColumn(8).setHeaderValue(Others.convertMaMonToMon(toHop[2]).toUpperCase());
        model.getColumn(9).setHeaderValue(Others.convertMaMonToMon(toHop[3]).toUpperCase());

        this.thiSinh = thiSinh;

        List<Object[]> data = new ArrayList<>();
        for (int i = 0; i < thiSinh.size(); ++i) {
            ThiSinh temp = thiSinh.get(i);
            List<Double> diem = Others.getDiemToHop(temp, (String) toHopF.getSelectedItem());
            data.add(new Object[]{
                temp.getSBD(),
                temp.getHoTen(),
                temp.getGioiTinh().getID(),
                DateUtils.date2Str(temp.getNgaySinh()),
                temp.getTruong().getTinh().getID(),
                temp.getTruong().getTenTruong(),
                temp.getToHop().getID(),
                diem.get(0),
                diem.get(1),
                diem.get(2),
                diem.get(0) + diem.get(1) + diem.get(2)
            });
        }
        Ui.displayTable(table, data);
    }

    void resetState() {
        toHopF.setSelectedIndex(0);
        displayTable(ThiSinh.getDB().QUERY(getFilter()));
    }

    String[] title = {"STT", "SBD", "Ho va ten", "Gioi tinh", "Ngay sinh", "Tinh", "Truong", "Khoi xet tuyen", "Mon 1", "Mon 2", "Mon 3", "Tong diem"};
    int[] size = {5, 10, 20, 5, 10, 10, 10, 8, 5, 5, 5, 6};

    void writePDF(File file) throws IOException {
        PDDocument mainDocument = new PDDocument();
        PDPage myPage = new PDPage(new PDRectangle(PDRectangle.A4.getHeight(), PDRectangle.A4.getWidth()));

        float height = myPage.getMediaBox().getHeight(), width = myPage.getMediaBox().getWidth();

        try (PDPageContentStream contentStream = new PDPageContentStream(mainDocument, myPage)) {
            PDFont font = PDType0Font.load(mainDocument, new File("src/resources/SourceCodePro-Regular.ttf"));
            float margin = 10;
            float y0 = height - 20;
            float tableWidth = width - (2 * margin);

            BaseTable table = new BaseTable(y0, y0, margin, tableWidth, margin, mainDocument, myPage, true, true);
            Row<PDPage> row = table.createRow(20);

            String th = (String) toHopF.getSelectedItem();
            String[] toHop_ = Others.khoiToHop.get(th);
            for (int i = 0; i < title.length; ++i)
                switch (i) {
                    case 8 -> row.createCell(size[i], toHop_[1].toUpperCase()).setFont(font);
                    case 9 -> row.createCell(size[i], toHop_[2].toUpperCase()).setFont(font);
                    case 10 -> row.createCell(size[i], toHop_[3].toUpperCase()).setFont(font);
                    default -> row.createCell(size[i], title[i]);
                }
            table.addHeaderRow(row);

            for (int i = 0; i < this.thiSinh.size(); ++i) {
                ThiSinh ts = this.thiSinh.get(i);
                List<Double> diem = Others.getDiemToHop(ts, (String) toHopF.getSelectedItem());
                Row<PDPage> row_ = table.createRow(15);
                row_.createCell(size[0], String.valueOf(i + 1)).setFont(font);
                row_.createCell(size[1], ts.getSBD()).setFont(font);
                row_.createCell(size[2], ts.getHoTen()).setFont(font);
                row_.createCell(size[3], ts.getGioiTinh().getID()).setFont(font);
                row_.createCell(size[4], DateUtils.date2Str(ts.getNgaySinh())).setFont(font);
                row_.createCell(size[5], ts.getTruong().getTinh().getID()).setFont(font);
                row_.createCell(size[6], ts.getTruong().getTenTruong()).setFont(font);
                row_.createCell(size[7], th).setFont(font);
                row_.createCell(size[8], String.format("%.2f", diem.get(0))).setFont(font);
                row_.createCell(size[9], String.format("%.2f", diem.get(1))).setFont(font);
                row_.createCell(size[10], String.format("%.2f", diem.get(2))).setFont(font);
                row_.createCell(size[11], String.format("%.2f", diem.get(0) + diem.get(1) + diem.get(2))).setFont(font);
            }
            table.draw();
            contentStream.close();

            mainDocument.addPage(myPage);
            moveLastPageToFirst(mainDocument);

            mainDocument.save(file);
            mainDocument.close();
        }
    }
    private void exportBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_exportBActionPerformed
        JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
        j.setSelectedFile(new File("khoiXetTuyen.pdf"));
        j.showSaveDialog(null);

        File result = j.getSelectedFile();
        if (result == null) return;

        Others.CreateFile(result.getAbsolutePath());
        try {
            writePDF(result);
        } catch (IOException ex) {
            Logger.getLogger(KhoiXetTuyenTK.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_exportBActionPerformed

    private void fillterBtn1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_fillterBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fillterBtn1ActionPerformed

    private void sortSBDBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sortSBDBActionPerformed
        // TODO add your handling code here:
        thiSinh.sort((a, b) -> a.getSBD().compareTo(b.getSBD()));
        displayTable(thiSinh);
    }//GEN-LAST:event_sortSBDBActionPerformed

    private void sortPBActionPerformed(ActionEvent evt) {//GEN-FIRST:event_sortPBActionPerformed
        // TODO add your handling code here:
        String th = (String) toHopF.getSelectedItem();
        thiSinh.sort((a, b) -> {
            return Double.compare(Others.getTongDiem(a, th), Others.getTongDiem(b, th));
        });
        displayTable(thiSinh);
    }//GEN-LAST:event_sortPBActionPerformed

    private void toHopFItemStateChanged(ItemEvent evt) {//GEN-FIRST:event_toHopFItemStateChanged
        // TODO add your handling code here:
        displayTable(ThiSinh.getDB().QUERY(getFilter()));
    }//GEN-LAST:event_toHopFItemStateChanged

    private void minFStateChanged(ChangeEvent evt) {//GEN-FIRST:event_minFStateChanged
        // TODO add your handling code here:
        displayTable(ThiSinh.getDB().QUERY(getFilter()));
    }//GEN-LAST:event_minFStateChanged

    private void maxFStateChanged(ChangeEvent evt) {//GEN-FIRST:event_maxFStateChanged
        // TODO add your handling code here:
        displayTable(ThiSinh.getDB().QUERY(getFilter()));
    }//GEN-LAST:event_maxFStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel SBDLabel;
    private JButton exportB;
    private JButton fillterBtn1;
    private JLabel jLabel3;
    private JSpinner maxF;
    private JSpinner minF;
    private JScrollPane scrollBar;
    private JButton sortPB;
    private JButton sortSBDB;
    private JTable table;
    private JComboBox<String> toHopF;
    // End of variables declaration//GEN-END:variables
}
